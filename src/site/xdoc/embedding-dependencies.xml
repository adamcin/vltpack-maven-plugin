<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is free and unencumbered software released into the public domain.
  ~
  ~ Anyone is free to copy, modify, publish, use, compile, sell, or
  ~ distribute this software, either in source code form or as a compiled
  ~ binary, for any purpose, commercial or non-commercial, and by any
  ~ means.
  ~
  ~ In jurisdictions that recognize copyright laws, the author or authors
  ~ of this software dedicate any and all copyright interest in the
  ~ software to the public domain. We make this dedication for the benefit
  ~ of the public at large and to the detriment of our heirs and
  ~ successors. We intend this dedication to be an overt act of
  ~ relinquishment in perpetuity of all present and future rights to this
  ~ software under copyright law.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  ~ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  ~ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  ~ IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  ~ OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ~ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  ~ OTHER DEALINGS IN THE SOFTWARE.
  ~
  ~ For more information, please refer to <http://unlicense.org/>
  -->

<document>
    <properties>
        <title>Embedding Dependencies</title>
    </properties>
    <body>
        <section name="Embedding OSGi Bundles">
            <p>
                The <a href="embed-bundles-mojo.html">embed-bundles</a> goal is used to programmatically add OSGi
                bundles to the vault package. By default, it will execute once during the <tt>prepare-package</tt> phase.
                Bundles will be inserted into the package at the path specified by the <tt>bundleInstallPath</tt>
                configuration parameter, with the effective node name matching the pattern
                <tt>[articleId]-[version].jar</tt>.
            </p>
            <p>
                Different bundles may be embedded at different <tt>bundleInstallPath</tt>s in the same package by using
                multiple executions of this goal, each with their own <tt>bundleInstallPath</tt> value.
            </p>
            <p>
                The <a href="vault-inf-mojo.html">vault-inf</a> goal will modify the workspaceFilter to include the
                embedded bundle paths under an appropriate filter root if it is not already included.
            </p>
        </section>
        <section name="Embedding Sub-packages">
            <p>
                The <a href="embed-packages-mojo.html">embed-packages</a> goal is used to programmatically add
                sub-packages to the vault package, which will be installed by the CRX Package Manager upon extraction of
                the parent package. Sub-packages are embedded under <tt>/etc/packages</tt> at the path determined by
                their PackageId, which is constructed based on the <tt>group</tt>, <tt>name</tt>, and <tt>version</tt>
                package properties present within the zip binary at <tt>META-INF/vault/properties.xml</tt>.
            </p>
            <p>
                The <a href="vault-inf-mojo.html">vault-inf</a> goal will modify the workspaceFilter to include the
                embedded package paths under an <tt>/etc/packages</tt> filter root.
            </p>
        </section>
        <section name="Embedding InstallHooks">
            <p>
                For more complex package installs, it may be necessary to implement one or more InstallHooks. A valid
                InstallHook is a jar with a <tt>Main-Class</tt> manifest attribute whose value references a class in the
                jar that implements <tt>com.day.jcr.vault.packaging.InstallHook</tt>.
            </p>
            <p>
                The <a href="embed-hooks-mojo.html">embed-hooks</a> goal will embed such jars under
                <tt>META-INF/vault/hooks</tt>, as expected by CRX Package Manager.
            </p>
        </section>
        <section name="Example POM with embedded dependencies">
            <p>
                The following example illustrates how to configure your POM to embed each type of
                dependency: bundles, packages, and install hooks. Notice that the embed configurations
                reference project dependencies by artifactId, which is similar to the convention used
                by the maven-bundle-plugin.
            </p>
            <source>
                <![CDATA[
<project>
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>example-ui</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- be sure to specify the packaging type as 'vltpack' -->
    <packaging>vltpack</packaging>

    <dependencies>
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>example-bundle</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>example-package</artifactId>
            <version>1.0-SNAPSHOT</version>
            <!-- vltpack deploys CRX packages to maven repositories with a ".zip" extension -->
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>example-hook</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>

        <plugins>
            <plugin>
                <groupId>net.adamcin</groupId>
                <artifactId>vltpack-maven-plugin</artifactId>
                <version>1.0.0</version>
                <extensions>true</extensions>

                <!-- project dependencies are referenced by
                artifactId in the plugin configuration -->
                <configuration>
                    <embedBundles>
                        <bundle>example-bundle</bundle>
                    </embedBundles>
                    <embedPackages>
                        <package>example-package</package>
                    </embedPackages>
                    <embedHooks>
                        <hook>example-hook</hook>
                    </embedHooks>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
            ]]>
            </source>
        </section>
    </body>
</document>
